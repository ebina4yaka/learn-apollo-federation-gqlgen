// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: reviews.proto

package generated

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body    string   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Author  *User    `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Product *Product `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *Review) Reset() {
	*x = Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reviews_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Review) ProtoMessage() {}

func (x *Review) ProtoReflect() protoreflect.Message {
	mi := &file_reviews_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Review.ProtoReflect.Descriptor instead.
func (*Review) Descriptor() ([]byte, []int) {
	return file_reviews_proto_rawDescGZIP(), []int{0}
}

func (x *Review) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Review) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Review) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Review) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

type ReviewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reviews []*Review `protobuf:"bytes,1,rep,name=reviews,proto3" json:"reviews,omitempty"`
}

func (x *ReviewsResponse) Reset() {
	*x = ReviewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reviews_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewsResponse) ProtoMessage() {}

func (x *ReviewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reviews_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewsResponse.ProtoReflect.Descriptor instead.
func (*ReviewsResponse) Descriptor() ([]byte, []int) {
	return file_reviews_proto_rawDescGZIP(), []int{1}
}

func (x *ReviewsResponse) GetReviews() []*Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

type ProductReviewsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Upc string `protobuf:"bytes,1,opt,name=upc,proto3" json:"upc,omitempty"`
}

func (x *ProductReviewsQuery) Reset() {
	*x = ProductReviewsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reviews_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductReviewsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductReviewsQuery) ProtoMessage() {}

func (x *ProductReviewsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_reviews_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductReviewsQuery.ProtoReflect.Descriptor instead.
func (*ProductReviewsQuery) Descriptor() ([]byte, []int) {
	return file_reviews_proto_rawDescGZIP(), []int{2}
}

func (x *ProductReviewsQuery) GetUpc() string {
	if x != nil {
		return x.Upc
	}
	return ""
}

type UserReviewsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserReviewsQuery) Reset() {
	*x = UserReviewsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reviews_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReviewsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReviewsQuery) ProtoMessage() {}

func (x *UserReviewsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_reviews_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReviewsQuery.ProtoReflect.Descriptor instead.
func (*UserReviewsQuery) Descriptor() ([]byte, []int) {
	return file_reviews_proto_rawDescGZIP(), []int{3}
}

func (x *UserReviewsQuery) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_reviews_proto protoreflect.FileDescriptor

var file_reviews_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x1a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x3c, 0x0a, 0x0f,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x27, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x70, 0x63, 0x22, 0x22, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x32, 0xa1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x18, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x3b, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reviews_proto_rawDescOnce sync.Once
	file_reviews_proto_rawDescData = file_reviews_proto_rawDesc
)

func file_reviews_proto_rawDescGZIP() []byte {
	file_reviews_proto_rawDescOnce.Do(func() {
		file_reviews_proto_rawDescData = protoimpl.X.CompressGZIP(file_reviews_proto_rawDescData)
	})
	return file_reviews_proto_rawDescData
}

var file_reviews_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_reviews_proto_goTypes = []interface{}{
	(*Review)(nil),              // 0: reviews.Review
	(*ReviewsResponse)(nil),     // 1: reviews.ReviewsResponse
	(*ProductReviewsQuery)(nil), // 2: reviews.ProductReviewsQuery
	(*UserReviewsQuery)(nil),    // 3: reviews.UserReviewsQuery
	(*User)(nil),                // 4: accounts.User
	(*Product)(nil),             // 5: products.Product
}
var file_reviews_proto_depIdxs = []int32{
	4, // 0: reviews.Review.author:type_name -> accounts.User
	5, // 1: reviews.Review.product:type_name -> products.Product
	0, // 2: reviews.ReviewsResponse.reviews:type_name -> reviews.Review
	2, // 3: reviews.ReviewService.ProductReviews:input_type -> reviews.ProductReviewsQuery
	3, // 4: reviews.ReviewService.UserReviews:input_type -> reviews.UserReviewsQuery
	1, // 5: reviews.ReviewService.ProductReviews:output_type -> reviews.ReviewsResponse
	1, // 6: reviews.ReviewService.UserReviews:output_type -> reviews.ReviewsResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_reviews_proto_init() }
func file_reviews_proto_init() {
	if File_reviews_proto != nil {
		return
	}
	file_accounts_proto_init()
	file_products_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_reviews_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reviews_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reviews_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductReviewsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reviews_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReviewsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reviews_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reviews_proto_goTypes,
		DependencyIndexes: file_reviews_proto_depIdxs,
		MessageInfos:      file_reviews_proto_msgTypes,
	}.Build()
	File_reviews_proto = out.File
	file_reviews_proto_rawDesc = nil
	file_reviews_proto_goTypes = nil
	file_reviews_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReviewServiceClient interface {
	ProductReviews(ctx context.Context, in *ProductReviewsQuery, opts ...grpc.CallOption) (*ReviewsResponse, error)
	UserReviews(ctx context.Context, in *UserReviewsQuery, opts ...grpc.CallOption) (*ReviewsResponse, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) ProductReviews(ctx context.Context, in *ProductReviewsQuery, opts ...grpc.CallOption) (*ReviewsResponse, error) {
	out := new(ReviewsResponse)
	err := c.cc.Invoke(ctx, "/reviews.ReviewService/ProductReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UserReviews(ctx context.Context, in *UserReviewsQuery, opts ...grpc.CallOption) (*ReviewsResponse, error) {
	out := new(ReviewsResponse)
	err := c.cc.Invoke(ctx, "/reviews.ReviewService/UserReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
type ReviewServiceServer interface {
	ProductReviews(context.Context, *ProductReviewsQuery) (*ReviewsResponse, error)
	UserReviews(context.Context, *UserReviewsQuery) (*ReviewsResponse, error)
}

// UnimplementedReviewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (*UnimplementedReviewServiceServer) ProductReviews(context.Context, *ProductReviewsQuery) (*ReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductReviews not implemented")
}
func (*UnimplementedReviewServiceServer) UserReviews(context.Context, *UserReviewsQuery) (*ReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserReviews not implemented")
}

func RegisterReviewServiceServer(s *grpc.Server, srv ReviewServiceServer) {
	s.RegisterService(&_ReviewService_serviceDesc, srv)
}

func _ReviewService_ProductReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReviewsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ProductReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviews.ReviewService/ProductReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ProductReviews(ctx, req.(*ProductReviewsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UserReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReviewsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UserReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviews.ReviewService/UserReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UserReviews(ctx, req.(*UserReviewsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReviewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reviews.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductReviews",
			Handler:    _ReviewService_ProductReviews_Handler,
		},
		{
			MethodName: "UserReviews",
			Handler:    _ReviewService_UserReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reviews.proto",
}
